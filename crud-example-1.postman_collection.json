{
	"info": {
		"_postman_id": "9e807593-ab0b-4f11-9420-bad22995b3b1",
		"name": "crud-example-1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26772219"
	},
	"item": [
		{
			"name": "Product",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/products/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"products"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get All Products Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/products/productsQ",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"productsQ"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get All Products Pageable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/products/2/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"2",
								"4"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/products/productsList",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"productsList"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Product By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/products/productById/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"productById",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Product By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/products/productByName/car",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"productByName",
								"car"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Add Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"car\",\n    \"qty\": 10,\n    \"price\": 10500.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/products/addProduct",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"addProduct"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Add Producs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"delivery van\",\n        \"qty\": 7,\n        \"price\": 24000.00\n    },\n    {\n        \"name\": \"race car\",\n        \"qty\": 3,\n        \"price\": 150000.00\n    },\n    {\n        \"name\": \"segway scooter\",\n        \"qty\": 15,\n        \"price\": 2500.00\n    },\n    {\n        \"name\": \"electric bicycle\",\n        \"qty\": 12,\n        \"price\": 1500.00\n    },\n    {\n        \"name\": \"cruise ship\",\n        \"qty\": 1,\n        \"price\": 800000000.00\n    },\n    {\n        \"name\": \"electric car\",\n        \"qty\": 10,\n        \"price\": 35000.00\n    },\n    {\n        \"name\": \"dune buggy\",\n        \"qty\": 5,\n        \"price\": 18000.00\n    },\n    {\n        \"name\": \"skid loader\",\n        \"qty\": 4,\n        \"price\": 40000.00\n    },\n    {\n        \"name\": \"mini excavator\",\n        \"qty\": 3,\n        \"price\": 30000.00\n    },\n    {\n        \"name\": \"all-terrain vehicle\",\n        \"qty\": 10,\n        \"price\": 6000.00\n    },\n    {\n        \"name\": \"luxury yacht\",\n        \"qty\": 1,\n        \"price\": 5000000.00\n    },\n    {\n        \"name\": \"food truck\",\n        \"qty\": 4,\n        \"price\": 80000.00\n    },\n    {\n        \"name\": \"milk van\",\n        \"qty\": 6,\n        \"price\": 20000.00\n    },\n    {\n        \"name\": \"ice cream cart\",\n        \"qty\": 15,\n        \"price\": 1500.00\n    },\n    {\n        \"name\": \"paraglider\",\n        \"qty\": 3,\n        \"price\": 5000.00\n    },\n    {\n        \"name\": \"kiteboard\",\n        \"qty\": 12,\n        \"price\": 800.00\n    },\n    {\n        \"name\": \"camper trailer\",\n        \"qty\": 5,\n        \"price\": 18000.00\n    },\n    {\n        \"name\": \"scooter bike\",\n        \"qty\": 18,\n        \"price\": 700.00\n    },\n    {\n        \"name\": \"jet boat\",\n        \"qty\": 2,\n        \"price\": 50000.00\n    },\n    {\n        \"name\": \"gondola\",\n        \"qty\": 4,\n        \"price\": 12000.00\n    },\n    {\n        \"name\": \"tricycle\",\n        \"qty\": 25,\n        \"price\": 100.00\n    },\n    {\n        \"name\": \"off-road motorcycle\",\n        \"qty\": 6,\n        \"price\": 4500.00\n    },\n    {\n        \"name\": \"hover bike\",\n        \"qty\": 2,\n        \"price\": 60000.00\n    },\n    {\n        \"name\": \"motorized wheelchair\",\n        \"qty\": 8,\n        \"price\": 2500.00\n    },\n    {\n        \"name\": \"paddleboard\",\n        \"qty\": 20,\n        \"price\": 300.00\n    },\n    {\n        \"name\": \"log hauler\",\n        \"qty\": 2,\n        \"price\": 85000.00\n    },\n    {\n        \"name\": \"road roller\",\n        \"qty\": 3,\n        \"price\": 70000.00\n    },\n    {\n        \"name\": \"cement mixer\",\n        \"qty\": 4,\n        \"price\": 50000.00\n    },\n    {\n        \"name\": \"construction crane\",\n        \"qty\": 2,\n        \"price\": 250000.00\n    },\n    {\n        \"name\": \"personal submarine\",\n        \"qty\": 1,\n        \"price\": 2000000.00\n    },\n    {\n        \"name\": \"amphibious vehicle\",\n        \"qty\": 2,\n        \"price\": 120000.00\n    },\n    {\n        \"name\": \"hydrofoil\",\n        \"qty\": 1,\n        \"price\": 300000.00\n    },\n    {\n        \"name\": \"vintage car\",\n        \"qty\": 3,\n        \"price\": 50000.00\n    },\n    {\n        \"name\": \"sidecar motorcycle\",\n        \"qty\": 5,\n        \"price\": 7000.00\n    },\n    {\n        \"name\": \"steam engine\",\n        \"qty\": 1,\n        \"price\": 400000.00\n    },\n    {\n        \"name\": \"sleigh\",\n        \"qty\": 10,\n        \"price\": 500.00\n    },\n    {\n        \"name\": \"rickshaw bike\",\n        \"qty\": 8,\n        \"price\": 300.00\n    },\n    {\n        \"name\": \"snowboard\",\n        \"qty\": 20,\n        \"price\": 200.00\n    },\n    {\n        \"name\": \"dog sled\",\n        \"qty\": 4,\n        \"price\": 1000.00\n    },\n    {\n        \"name\": \"bobsled\",\n        \"qty\": 3,\n        \"price\": 1500.00\n    },\n    {\n        \"name\": \"jetliner\",\n        \"qty\": 1,\n        \"price\": 120000000.00\n    },\n    {\n        \"name\": \"hang glider\",\n        \"qty\": 6,\n        \"price\": 2500.00\n    },\n    {\n        \"name\": \"glider\",\n        \"qty\": 2,\n        \"price\": 15000.00\n    },\n    {\n        \"name\": \"cargo ship\",\n        \"qty\": 1,\n        \"price\": 400000000.00\n    },\n    {\n        \"name\": \"antique carriage\",\n        \"qty\": 3,\n        \"price\": 12000.00\n    },\n    {\n        \"name\": \"unicycle\",\n        \"qty\": 10,\n        \"price\": 150.00\n    },\n    {\n        \"name\": \"penny-farthing bicycle\",\n        \"qty\": 5,\n        \"price\": 800.00\n    },\n    {\n        \"name\": \"antique locomotive\",\n        \"qty\": 1,\n        \"price\": 500000.00\n    },\n    {\n        \"name\": \"tow truck\",\n        \"qty\": 4,\n        \"price\": 35000.00\n    },\n    {\n        \"name\": \"flatbed truck\",\n        \"qty\": 3,\n        \"price\": 45000.00\n    },\n    {\n        \"name\": \"cherry picker\",\n        \"qty\": 2,\n        \"price\": 55000.00\n    },\n    {\n        \"name\": \"blimp\",\n        \"qty\": 1,\n        \"price\": 1000000.00\n    },\n    {\n        \"name\": \"skydiving parachute\",\n        \"qty\": 12,\n        \"price\": 2000.00\n    },\n    {\n        \"name\": \"banana boat\",\n        \"qty\": 8,\n        \"price\": 1500.00\n    },\n    {\n        \"name\": \"hydro bike\",\n        \"qty\": 10,\n        \"price\": 400.00\n    },\n    {\n        \"name\": \"train car\",\n        \"qty\": 15,\n        \"price\": 30000.00\n    },\n    {\n        \"name\": \"handcar\",\n        \"qty\": 7,\n        \"price\": 1000.00\n    },\n    {\n        \"name\": \"double-decker bus\",\n        \"qty\": 2,\n        \"price\": 90000.00\n    },\n    {\n        \"name\": \"rail\",\n        \"qty\": 7,\n        \"price\": 1000.00\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/products/addProducts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"addProducts"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":1,\n\t\"name\": \"jet\",\n    \"qty\": 10,\n    \"price\": 10500.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/products/updateProduct",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"updateProduct"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Product By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/products/product/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"products",
								"product",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Get All Orders By Order No.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/orders/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders",
								"5"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Add Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"orderNumber\": 5,\n        \"customerName\": \"Anil\",\n        \"productId\": 50\n    },\n    {\n        \"orderNumber\": 5,\n        \"customerName\": \"Anil\",\n        \"productId\": 48\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/orders/saveAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders",
								"saveAll"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Add Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"orderNumber\": 5,\n        \"customerName\": \"Anil\",\n        \"productId\": 135\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/orders/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders",
								"save"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":1,\n\t\"orderNumber\": 5,\n    \"customerName\": \"Anil\",\n    \"productId\": 140\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/orders/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders",
								"update"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update Order Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":2,\n\t\"orderNumber\": 5,\n    \"customerName\": \"Anil\",\n    \"productId\": 141\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/orders/updateQry",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders",
								"updateQry"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/orders/delete/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"orders",
								"delete",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "employee",
			"item": [
				{
					"name": "Add employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Sajan\",\n        \"age\": 20,\n        \"address\": {\n            \"city\": \"Colombo\",\n            \"addressType\": \"Permanant\"\n        }\n    },\n    {\n        \"name\": \"Pavith\",\n        \"age\": 30,\n        \"address\": {\n            \"city\": \"Kadawatha\",\n            \"addressType\": \"Current\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/employees/saveAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"employees",
								"saveAll"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Add employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Pradeep\",\n    \"address_id\": 6,\n    \"passport_id\": 6,\n    \"department_id\": 2,\n    \"project_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/employees/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"employees",
								"save"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Add employee Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sagara\",\n    \"age\": 38,\n    \"address\": {\n        \"city\": \"Rathnapura\",\n        \"addressType\": \"Current\"\n    },\n    \"department_id\": 8\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/employees/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"employees",
								"save"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get All Employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"employees"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Employee By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:6784/api/v1/employees/id/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"employees",
								"id",
								"6"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Department",
			"item": [
				{
					"name": "Add Department",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"IT\",\n    \"employees\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:6784/api/v1/departments/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6784",
							"path": [
								"api",
								"v1",
								"departments",
								"save"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Library Management System",
			"item": [
				{
					"name": "Books",
					"item": [
						{
							"name": "Get Books",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:6784/api/v1/Books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Books"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Book",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Tilaka Saha Tilaka\",\r\n    \"author_id\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Books/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Books",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Book",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":5,\r\n    \"name\":\"Yali Upannemi\",\r\n     \"author_id\":12\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Books/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Books",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Book",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Kumarathunga Munidasa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Books/delete/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Books",
										"delete",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authors",
					"item": [
						{
							"name": "Get Authors",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:6784/api/v1/Authors",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Books By Author",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:6784/api/v1/Authors/name/Martin Wickramasinghe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Authors",
										"name",
										"Martin Wickramasinghe"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Author",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Gunadasa Amarasekara\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Authors/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Authors",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Author",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Kumarathunga Munidasa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Authors/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Authors",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Author",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Kumarathunga Munidasa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Authors/delete/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Authors",
										"delete",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Members",
					"item": [
						{
							"name": "Get Members",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:6784/api/v1/Members",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Members By Book Name",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:6784/api/v1/Members/book/Viragaya",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Members",
										"book",
										"Viragaya"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Member",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Priyantha\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Members/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Members",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Member",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Mahinda\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Members/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Members",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Book To Momber",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"member_id\": 3,\r\n    \"book_id\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Members/assign",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Members",
										"assign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Member",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":1,\r\n    \"name\":\"Kumarathunga Munidasa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Members/delete/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Members",
										"delete",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Borrow Records",
					"item": []
				}
			]
		},
		{
			"name": "Student Course Management System",
			"item": [
				{
					"name": "Student",
					"item": [
						{
							"name": "Add Student",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Sandun Devinda\",\r\n    \"email\":\"sandund@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/students/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"students",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Students",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"Amanda Silva\",\r\n        \"email\": \"amanda.silva@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Kamal Perera\",\r\n        \"email\": \"kamal.perera@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Nuwan Fernando\",\r\n        \"email\": \"nuwan.fernando@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Priya Kumari\",\r\n        \"email\": \"priya.kumari@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Rohan Dias\",\r\n        \"email\": \"rohan.dias@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Dilini Rathnayake\",\r\n        \"email\": \"dilini.rathnayake@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Isuru Wijesinghe\",\r\n        \"email\": \"isuru.wijesinghe@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Chathura Liyanage\",\r\n        \"email\": \"chathura.liyanage@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Sanjaya Karunaratne\",\r\n        \"email\": \"sanjaya.karunaratne@example.com\"\r\n    },\r\n    {\r\n        \"name\": \"Harini Jayasinghe\",\r\n        \"email\": \"harini.jayasinghe@example.com\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/students/addAll",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"students",
										"addAll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign course to student",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Sandun Devinda\",\r\n    \"email\":\"sandund@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/students/addAll",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"students",
										"addAll"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Add Course",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"\",\r\n    \"description\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Courses/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Courses",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Courses",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"name\": \"Mathematics 101\",\r\n        \"description\": \"An introduction to fundamental concepts in algebra and calculus.\"\r\n    },\r\n    {\r\n        \"name\": \"Physics for Beginners\",\r\n        \"description\": \"Basic principles of classical mechanics, thermodynamics, and waves.\"\r\n    },\r\n    {\r\n        \"name\": \"Chemistry Essentials\",\r\n        \"description\": \"Fundamental chemical principles including atomic structure and bonding.\"\r\n    },\r\n    {\r\n        \"name\": \"English Literature\",\r\n        \"description\": \"Study of classic and modern literature works.\"\r\n    },\r\n    {\r\n        \"name\": \"Introduction to Programming\",\r\n        \"description\": \"Learn programming basics using Python.\"\r\n    },\r\n    {\r\n        \"name\": \"Web Development Basics\",\r\n        \"description\": \"An introduction to HTML, CSS, and JavaScript for building websites.\"\r\n    },\r\n    {\r\n        \"name\": \"Database Management\",\r\n        \"description\": \"Core concepts of relational databases and SQL.\"\r\n    },\r\n    {\r\n        \"name\": \"Environmental Science\",\r\n        \"description\": \"An overview of ecological principles and environmental issues.\"\r\n    },\r\n    {\r\n        \"name\": \"Business Management\",\r\n        \"description\": \"Introduction to business operations and management practices.\"\r\n    },\r\n    {\r\n        \"name\": \"Psychology 101\",\r\n        \"description\": \"Basics of human behavior and mental processes.\"\r\n    },\r\n    {\r\n        \"name\": \"Marketing Principles\",\r\n        \"description\": \"Core concepts in marketing and consumer behavior.\"\r\n    },\r\n    {\r\n        \"name\": \"Data Structures\",\r\n        \"description\": \"Fundamental data organization and manipulation techniques.\"\r\n    },\r\n    {\r\n        \"name\": \"Operating Systems\",\r\n        \"description\": \"Study of OS concepts such as processes, memory, and file systems.\"\r\n    },\r\n    {\r\n        \"name\": \"Art History\",\r\n        \"description\": \"Exploration of key movements and works in art history.\"\r\n    },\r\n    {\r\n        \"name\": \"Digital Media\",\r\n        \"description\": \"Overview of digital content creation and management.\"\r\n    },\r\n    {\r\n        \"name\": \"Mobile App Development\",\r\n        \"description\": \"Learn the basics of building Android and iOS applications.\"\r\n    },\r\n    {\r\n        \"name\": \"Introduction to Statistics\",\r\n        \"description\": \"Basic statistical methods and applications.\"\r\n    },\r\n    {\r\n        \"name\": \"Ethical Hacking\",\r\n        \"description\": \"Principles of cybersecurity and ethical hacking practices.\"\r\n    },\r\n    {\r\n        \"name\": \"Graphic Design\",\r\n        \"description\": \"Fundamentals of design using modern graphic tools.\"\r\n    },\r\n    {\r\n        \"name\": \"Public Speaking\",\r\n        \"description\": \"Techniques for effective oral communication.\"\r\n    }\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:6784/api/v1/Courses/addAll",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "6784",
									"path": [
										"api",
										"v1",
										"Courses",
										"addAll"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Enrollment",
					"item": []
				}
			]
		},
		{
			"name": "Hello",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6784/api/v1/hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6784",
					"path": [
						"api",
						"v1",
						"hello"
					]
				}
			},
			"response": []
		}
	]
}